{"version":3,"file":"chips.component.js","sourceRoot":"","sources":["../../../../src/platform/core/chips/chips.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, Output, forwardRef, DoCheck, ViewChild, ViewChildren, QueryList, OnInit, HostListener } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, FormControl } from '@angular/forms';\nimport { MdChip, MdInputDirective, ESCAPE, LEFT_ARROW, RIGHT_ARROW, DELETE, BACKSPACE } from '@angular/material';\nimport { Observable } from 'rxjs/Observable';\nimport { Subject } from 'rxjs/Subject';\nimport 'rxjs/add/observable/timer';\n\nconst noop: any = () => {\n  // empty method\n};\n\nexport const TD_CHIPS_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => TdChipsComponent),\n  multi: true,\n};\n\n@Component({\n  providers: [ TD_CHIPS_CONTROL_VALUE_ACCESSOR ],\n  selector: 'td-chips',\n  styleUrls: ['./chips.component.scss' ],\n  templateUrl: './chips.component.html',\n})\nexport class TdChipsComponent implements ControlValueAccessor, DoCheck, OnInit {\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  private _value: any = [];\n\n  private _length: number = 0;\n  private _requireMatch: boolean = false;\n  private _readOnly: boolean = false;\n\n  @ViewChild(MdInputDirective) _inputChild: MdInputDirective;\n  @ViewChildren(MdChip) _chipsChildren: QueryList<MdChip>;\n\n  /**\n   * Boolean value that specifies if the input is valid against the provieded list.\n   */\n  matches: boolean = true;\n  /**\n   * Flag that is true when autocomplete is focused.\n   */\n  focused: boolean = false;\n\n  /**\n   * FormControl for the mdInput element.\n   */\n  inputControl: FormControl = new FormControl();\n\n  /**\n   * Subject to control what items to render in the autocomplete\n   */\n  subject: Subject<string[]> = new Subject<string[]>();\n\n  /**\n   * Observable of items to render in the autocomplete\n   */\n  filteredItems: Observable<string[]> = this.subject.asObservable();\n\n  /**\n   * items?: string[]\n   * Enables Autocompletion with the provided list of strings.\n   */\n  @Input('items') items: string[] = [];\n\n  /**\n   * requireMatch?: boolean\n   * Validates input against the provided list before adding it to the model.\n   * If it doesnt exist, it cancels the event.\n   */\n  @Input('requireMatch')\n  set requireMatch(requireMatch: any) {\n    this._requireMatch = requireMatch !== '' ? (requireMatch === 'true' || requireMatch === true) : true;\n  }\n  get requireMatch(): any {\n    return this._requireMatch;\n  }\n\n  /**\n   * readOnly?: boolean\n   * Disables the chips input and chip removal icon.\n   */\n  @Input('readOnly')\n  set readOnly(readOnly: boolean) {\n    this._readOnly = readOnly;\n    if (readOnly) {\n      this.inputControl.disable();\n    } else {\n      this.inputControl.enable();\n    }\n  }\n  get readOnly(): boolean {\n    return this._readOnly;\n  }\n\n  /**\n   * placeholder?: string\n   * Placeholder for the autocomplete input.\n   */\n  @Input('placeholder') placeholder: string;\n\n  /**\n   * add?: function\n   * Method to be executed when string is added as chip through the autocomplete.\n   * Sends chip value as event.\n   */\n  @Output('add') add: EventEmitter<string> = new EventEmitter<string>();\n\n  /**\n   * remove?: function\n   * Method to be executed when string is removed as chip with the \"remove\" button.\n   * Sends chip value as event.\n   */\n  @Output('remove') remove: EventEmitter<string> = new EventEmitter<string>();\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  @Input() set value(v: any) {\n    if (v !== this._value) {\n      this._value = v;\n      this._length = this._value ? this._value.length : 0;\n      if (this._value) {\n        this._filter(this.inputControl.value);\n      }\n    }\n  }\n  get value(): any { return this._value; };\n\n  ngOnInit(): void {\n    this.inputControl.valueChanges\n      .debounceTime(100)\n      .subscribe((value: string) => {\n        this.matches = true;\n        this._filter(value);\n      });\n    // filter the autocomplete options after everything is rendered\n    Observable.timer().subscribe(() => {\n      this._filter(this.inputControl.value);\n    });\n  }\n\n  ngDoCheck(): void {\n    // Throw onChange event only if array changes size.\n    if (this._value && this._value.length !== this._length) {\n      this._length = this._value.length;\n      this.onChange(this._value);\n    }\n  }\n\n  /**\n   * Returns a list of filtered items.\n   */\n  filter(val: string): string[] {\n    return this.items.filter((item: string) => {\n      return val ? item.indexOf(val) > -1 : true;\n    });\n  }\n\n  /**\n   * Method that is executed when trying to create a new chip from the autocomplete.\n   * returns 'true' if successful, 'false' if it fails.\n   */\n  addChip(value: string): boolean {\n    if (value.trim() === '' || this._value.indexOf(value) > -1) {\n      this.matches = false;\n      return false;\n    }\n    if (this.items && this.requireMatch) {\n      if (this.items.indexOf(value) < 0) {\n        this.matches = false;\n        return false;\n      }\n    }\n    this._value.push(value);\n    this.add.emit(value);\n    this.onChange(this._value);\n    this.inputControl.setValue('');\n    this.matches = true;\n    return true;\n  }\n\n  /**\n   * Method that is executed when trying to remove a chip.\n   * returns 'true' if successful, 'false' if it fails.\n   */\n  removeChip(value: string): boolean {\n    let index: number = this._value.indexOf(value);\n    if (index < 0) {\n      return false;\n    }\n    this._value.splice(index, 1);\n    this.remove.emit(value);\n    this.onChange(this._value);\n    this.inputControl.setValue('');\n    return true;\n  }\n\n  handleFocus(): boolean {\n    this.focused = true;\n    return true;\n  }\n\n  handleBlur(): boolean {\n    this.focused = false;\n    this.matches = true;\n    this.onTouched();\n    return true;\n  }\n\n  /**\n   * Programmatically focus the input. Since its the component entry point\n   */\n  focus(): void {\n    this._inputChild.focus();\n  }\n\n  /**\n   * Passes relevant input key presses.\n   */\n  _inputKeydown(event: KeyboardEvent): void {\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n      case DELETE:\n      case BACKSPACE:\n        /** Check to see if input is empty when pressing left arrow to move to the last chip */\n        if (!this._inputChild.value) {\n          this._focusLastChip();\n          event.preventDefault();\n        }\n        break;\n      case RIGHT_ARROW:\n        /** Check to see if input is empty when pressing right arrow to move to the first chip */\n        if (!this._inputChild.value) {\n          this._focusFirstChip();\n          event.preventDefault();\n        }\n        break;\n      default:\n        // default\n    }\n  }\n\n  /**\n   * Passes relevant chip key presses.\n   */\n  _chipKeydown(event: KeyboardEvent, index: number): void {\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        /** Check to see if not in [readOnly] state to delete a chip */\n        if (!this.readOnly) {\n          /**\n           * Checks if deleting last single chip, to focus input afterwards\n           * Else check if its not the last chip of the list to focus the next one.\n           */\n          if (index === (this._totalChips - 1) && index === 0) {\n            this.focus();\n          } else if (index < (this._totalChips - 1)) {\n            this._focusChip(index + 1);\n          }\n          this.removeChip(this.value[index]);\n        }\n        break;\n      case LEFT_ARROW:\n        /** Check to see if left arrow was pressed while focusing the first chip to focus input next */\n        if (index === 0) {\n          this.focus();\n          event.stopPropagation();\n        }\n        break;\n      case RIGHT_ARROW:\n        /** Check to see if right arrow was pressed while focusing the last chip to focus input next */\n        if (index === (this._totalChips - 1)) {\n          this.focus();\n          event.stopPropagation();\n        }\n        break;\n      case ESCAPE:\n        this.focus();\n        break;\n      default:\n        // default\n    }\n  }\n\n  /**\n   * Implemented as part of ControlValueAccessor.\n   */\n  writeValue(value: any): void {\n    this.value = value;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  onChange = (_: any) => noop;\n  onTouched = () => noop;\n\n  /**\n   *\n   * Method to filter the options for the autocomplete\n   */\n  private _filter(value: string): void {\n    let items: string[] = this.filter(value);\n    items = items.filter((filteredItem: string) => {\n      return this._value && filteredItem ? this._value.indexOf(filteredItem) < 0 : true;\n    });\n    this.subject.next(items);\n  }\n\n  /**\n   * Get total of chips\n   */\n  private get _totalChips(): number {\n    let chips: MdChip[] = this._chipsChildren.toArray();\n    return chips.length;\n  }\n\n  /**\n   * Method to focus a desired chip by index\n   */\n  private _focusChip(index: number): void {\n    /** check to see if index exists in the array before focusing */\n    if (index > -1 && this._totalChips > index) {\n      this._chipsChildren.toArray()[index].focus();\n    }\n  }\n\n  /** Method to focus first chip */\n  private _focusFirstChip(): void {\n    this._focusChip(0);\n  }\n\n  /** MEthod to focus last chip */\n  private _focusLastChip(): void {\n    this._focusChip(this._totalChips - 1);\n  }\n\n}\n"]}